@startuml
header Learn and Design 2023 - POD 1
footer Page %page% of %lastpage%

title: Food Delivery Application - Class Diagram

' Public (+): Accessible by all classes.
' Private (-): Accessible only within the current class.
' Protected (#): Accessible within the current class and its subclass.

abstract class User {
    #Id: string
    #FirstName: string
    #LastName: string
    #EmailAddress: string
    #UserName: string
    #Password: string
    #Role: Role
    #Active: bool
    +LogIn(): bool
    +LogOut(): bool
    +ModifyUserName(userName: string): bool
    +ModifyEmailAddress(emailAddress: string): bool
    +ModifyPassword(password: string): bool
}

enum Role {
    Consumer
    ApplicationManager
    RestaurantOwner
}

class Address {
    #Id: string
    #StreetAddress: string
    #City: string
    #State: string
    #Zipcode: string
    +Validate(): bool
    +ModifyAddress(streetAddress: string, city: string, state: string, zipCode: string): bool
    +GetFullAddress(): string
}

class ApplicationManager {
    +PendingApprovals: ArrayList<AccountId>
    +PendingRefunds: ArrayList<RefundId>
    +ApproveRegistration(registrationId: string): bool
    +RejectRegistration(registrationId: string, reason: string): bool
    +InitiateRefund(orderId: string): bool
    +ApproveRefund(refundId: string): bool
    +DeclineRefund(refundId: string, reason: string): bool
    +ProcessRefund(RefundId: string): void
}

class RestaurantOwner {
    +AddressId: string
    +RestaurantId: string
    +ActiveOrders: ArrayList<Order>
    +CompletedOrders: ArrayList<Order>
    +ActiveRefunds: ArrayList<Refund>
    +CompletedRefunds: ArrayList<Refund>
    +AddMenuItem(menuItem: MenuItem): bool
    +RemoveMenuItem(menuItemId: string): bool
    +ModifyMenuItem(menuItemId: string, name: string, description: string, vegetarian: bool, price: float): bool
    +UpdateOrderStatus(orderId: string, orderStatus: OrderStatus): bool
    +UpdateRefundStatus(refundId: string, refundStatus: +RefundStatus): bool
}

class Consumer {
    +AddressId: string
    +Orders: ArrayList<Order>
    +ViewOrders(): ArrayList<Order>
    +ViewCart(): ArrayList<OrderMenuItem>
    +EditCart(): void
    +AddToCart(menuItemId: string, careInstructions: string): bool
    +RemoveFromCart(orderMenuItemId: string): bool
    +PlaceOrder(deliveryAddress: Address): bool
    +CancelOrder(orderId: string): bool
    +RequestRefund(orderId: string, reason: string): bool
    +TrackOrderStatus(orderId: string): OrderStatus
}

class Registration {
    #Id: string
    #RestaurantOwnerId: string
    #AddressId: string
    #RegistrationStatus: RegistrationStatus
    +UpdateStatus(status: RegistrationStatus): void
} 

enum RegistrationStatus {
    Pending
    Accepted
    Declined
}

class Restaurant {
    #Id: string
    #RestaurantOwnerId: string
    #Name: string
    #AddressId: string
    #Cuisine: ArrayList<string>
    #Vegetarian: bool
    #NonVegtarian: bool
    #RegistrationId: string
    #Rating: string
    #Popularity: string
    #CalculateDeliveryTime(): float
    #GetRating(): string
    #GetPopularity(): string
    +AddMenu(menu: Menu): void
    +AddCuisine(cuisineName: string): bool
    +RemoveCuisine(cuisineName: string): bool
    +ModifyCuisine(cuisineName: string, newName: string): bool
}

class MenuItem {
    #Id: string
    #Name: string
    #Type: string
    #Description: string
    #Vegetarian: bool
    #Price: float
    +UpdateItem(name: string, type: string, description: string, vegetarian: bool, price: float): void
    +ModifyType(type: string): bool
}

class OrderMenuItem {
    #CareInstructions: string
    #MenuItemId: string
    +ModifyCareInstructions(careInstructions: string): bool
}

class Menu {
    #Id: string
    #RestaurantId: string
    #MenuItems: ArrayList<MenuItemId>
}

class Payment {
    #Id: string
    #PaymentTypeName: string
    #AccountHolderName: string
    #BillingAddressId: string
    #AccountNumber: string
    #Currency: Currency
    #Type: PaymentType
    #PaymentStatus: PaymentStatus
}

enum Currency {
    USD
    INR
}

enum PaymentType {
    COD
    DebitCard
}

enum PaymentStatus {
    Pending
    Processing
    Completed
    Failed
}

class Cart {
    #Id: string
    #ConsumerId: string
    #Items: ArrayList<OrderMenuItemId>
    +AddItem(item: OrderMenuItem): void
    +RemoveItem(ItemId: string): void
    +ModifyItems(items: ArrayList): bool
}

class Order {
    #Id: string
    #RestaurantId: string
    #ConsumerId: string
    #DeliveryAddressId: string
    #CreationDateTime: datetime
    #Items: ArrayList<OrderMenuItemId>
    #PaymentId: string
    #OrderStatus: OrderStatus
    #PaymentId: string
    #RefundId: string

    +CalculateTotalItemCost(): float
    +CalculateTax(): float
    +Tip(): float
    +CalculateDeliveryFee(): float
    +CalculateTotalCost(): float

    +MarkAsReceived(): void
    +MarkAsAccepted(): void
    +MarkAsShipped(): void
    +MarkAsDelivered(): void
}

enum OrderStatus {
    Received
    Declined
    Accepted
    Processing
    Shipped
    Delivered
}

class Refund {
    #Id: string
    #OrderId: string
    #SubmitDateTime: datetime
    #RefundStatus: RefundStatus
}

enum RefundStatus {
    Requested
    Acknowledged
    Accepted
    Declined
    Initiated
    ProcessingPayment
    Complete
}

    OrderMenuItem <|-- MenuItem
    ApplicationManager <|-- User
    RestaurantOwner <|-- User
    Consumer <|-- User

    Refund -- RefundStatus
    Order -- OrderStatus
    Payment -- PaymentStatus
    Order -- Payment
    Consumer -- Order
    Restaurant -- Order
    Menu -- MenuItem
    Cart -- OrderMenuItem
    Payment -- PaymentType
    Payment -- Currency
    RestaurantOwner -- Registration
    Registration -- RegistrationStatus
    ApplicationManager -- Registration
    User -- Address
    Restaurant -- Address
    Consumer -- Cart
@enduml
